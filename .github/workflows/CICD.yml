name: CI/CD

on:
  push:
    branches:
      - develop
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      mongodb:
        image: mongo:latest
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ secrets.MONGO_INITDB_DATABASE }}
          
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          mkdir -p src/test/resources
          echo "${{ secrets.CI_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.CI_YML }}" | base64 --decode > src/test/resources/application.yml
          
      - name: Create firebase-service-account.json
        run: |
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 --decode > src/main/resources/firebase/firebase-service-account.json
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run tests
        run: ./gradlew test

  cd:
    needs: ci
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.CD_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 --decode > src/main/resources/firebase/firebase-service-account.json
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar
          
      - name: DockerHub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Docker 이미지 빌드
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest .
        
      - name: DockerHub 푸시
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest
        
      - name: Create .env file
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
          echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
          
      - name: Send docker-compose.yml and .env to local server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LOCAL_SERVER_HOST }}
          username: ${{ secrets.LOCAL_SERVER_USER }}
          key: ${{ secrets.LOCAL_SERVER_SSH_KEY }}
          port: ${{ secrets.LOCAL_SERVER_PORT }}
          source: "docker-compose.yml, .env"
          target: "/home/dwkim/app"
          
      - name: Send deploy.sh to local server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.LOCAL_SERVER_HOST }}
          username: ${{ secrets.LOCAL_SERVER_USER }}
          key: ${{ secrets.LOCAL_SERVER_SSH_KEY }}
          port: ${{ secrets.LOCAL_SERVER_PORT }}
          source: "deploy.sh"
          target: "/home/dwkim/app"
          
      - name: Deploy to local server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LOCAL_SERVER_HOST }}
          username: ${{ secrets.LOCAL_SERVER_USER }}
          key: ${{ secrets.LOCAL_SERVER_SSH_KEY }}
          port: ${{ secrets.LOCAL_SERVER_PORT }}
          script: |
            cd /home/dwkim/app
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}:latest
            chmod +x ./deploy.sh
            ./deploy.sh
            docker image prune -f
